#lang rosette

(require "interpreter.rkt" "state.rkt" "graph.rkt" "json.rkt" "variables.rkt" "examples.rkt" "programs.rkt")

(printf "----------------------------------------------------------\n")
(printf "-- The benchmarks from this section refer to the paper. --\n")
(printf "----------------------------------------------------------\n")

(printf "\n\n----------------------------------------------------------\n")
(printf "------- Specification: Figure 3a, Graph: Figure 3b -------\n\n")
(define test-graph (json->graph food-web))
(printf "-----Translate-----\n")
(define test-state (time (translate test-graph programFoodWeb-hard)))
(printf "\n-------Solve-------\n")
(define test-model (time (solve (asserts))))
(printf "\n------to JSON------\n")
(graph->json test-graph test-state (get-assignments test-model))

(printf "\n\n----------------------------------------------------------\n")
(printf "------- Specification: Figure 4c, Graph: Not Shown --------\n\n")
(set! test-graph (json->graph food-web))
(printf "-----Translate-----\n")
(set! test-state (time (translate test-graph programFoodWeb)))
(printf "\n-------Solve-------\n")
(set! test-model (time (solve (asserts))))
(printf "\n------to JSON------\n")
(graph->json test-graph test-state (get-assignments test-model))

(printf "\n\n----------------------------------------------------------\n")
(printf "------- Specification: Figure 4c, Graph: Figure 4b -------\n\n")
(set! test-graph (json->graph big-food-web))
(printf "-----Translate-----\n")
(set! test-state (time (translate test-graph programFoodWeb)))
(printf "\n-------Solve-------\n")
(set! test-model (time (solve (asserts))))
(printf "\n------to JSON------\n")
(graph->json test-graph test-state (get-assignments test-model))

(printf "\n\n----------------------------------------------------------\n")
(printf "------- Specification: Figure 5a, Graph: Figure 5b -------\n\n")
(set! test-graph (json->graph twenty-nodes))
(printf "-----Translate-----\n")
(set! test-state (time (translate test-graph program1)))
(printf "\n-------Solve-------\n")
(set! test-model (time (solve (asserts))))
(printf "\n------to JSON------\n")
(graph->json test-graph test-state (get-assignments test-model))

(printf "\n\n----------------------------------------------------------\n")
(printf "------- Specification: Figure 5a, Graph: Figure 7b -------\n\n")
(printf "   Long runtime (54 minutes) so commented out.")
;(set! test-graph (json->graph cola-tree-simplified))
;(printf "-----Translate-----\n")
;(set! test-state (time (translate test-graph program1)))
;(printf "\n-------Solve-------\n")
;(set! test-model (time (solve (asserts))))
;(printf "\n------to JSON------\n")
;(graph->json test-graph test-state (get-assignments test-model))

(printf "\n\n----------------------------------------------------------\n")
(printf "------- Specification: Figure 5a, Graph: Figure 6b -------\n\n")
(set! test-graph (json->graph twenty-dag))
(printf "-----Translate-----\n")
(set! test-state (time (translate test-graph program1)))
(printf "\n-------Solve-------\n")
(set! test-model (time (solve (asserts))))
(printf "\n------to JSON------\n")
(graph->json test-graph test-state (get-assignments test-model))

(printf "\n\n----------------------------------------------------------\n")
(printf "------- Specification: Figure 8a, Graph: Figure 8b -------\n\n")
(set! test-graph (json->graph ten-nodes))
(printf "-----Translate-----\n")
(set! test-state (time (translate test-graph program2)))
(printf "\n-------Solve-------\n")
(set! test-model (time (solve (asserts))))
(printf "\n------to JSON------\n")
(graph->json test-graph test-state (get-assignments test-model))